{"version":3,"sources":["components/ExpenseDate.js","components/ExpenseItem.js","components/Expenses.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseDate","props","month","date","toLocaleString","day","year","getFullYear","className","ExpenseItem","title","amount","Expenses","items","App","expenses","id","Date","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAiBeA,MAdf,SAAqBC,GACnB,IAAMC,EAAQD,EAAME,KAAKC,eAAe,QAAS,CAACF,MAAO,SACnDG,EAAMJ,EAAME,KAAKC,eAAe,QAAS,CAACC,IAAK,YAC/CC,EAAOL,EAAME,KAAKI,cAExB,OACE,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,uBAAuBN,GACtC,yBAAKM,UAAU,qBAAqBH,GACpC,yBAAKG,UAAU,sBAAsBF,K,MCK9BG,MAbf,SAAqBR,GAEnB,OACE,yBAAKO,UAAU,gBACb,kBAAC,EAAD,CAAaL,KAAMF,EAAME,OACzB,yBAAKK,UAAU,6BACb,4BAAKP,EAAMS,OACX,yBAAKF,UAAU,uBAAf,IAAuCP,EAAMU,W,MCGtCC,MAVf,SAAkBX,GAChB,OACE,yBAAKO,UAAU,YACb,kBAAC,EAAD,CAAaE,MAAOT,EAAMY,MAAM,GAAGH,MAAOC,OAAQV,EAAMY,MAAM,GAAGF,OAAQR,KAAMF,EAAMY,MAAM,GAAGV,OAC9F,kBAAC,EAAD,CAAaO,MAAOT,EAAMY,MAAM,GAAGH,MAAOC,OAAQV,EAAMY,MAAM,GAAGF,OAAQR,KAAMF,EAAMY,MAAM,GAAGV,OAC9F,kBAAC,EAAD,CAAaO,MAAOT,EAAMY,MAAM,GAAGH,MAAOC,OAAQV,EAAMY,MAAM,GAAGF,OAAQR,KAAMF,EAAMY,MAAM,GAAGV,SCqBrFW,MA3Bf,WACE,IAAMC,EAAW,CACf,CACEC,GAAI,KACJN,MAAO,eACPC,OAAQ,MACRR,KAAM,IAAIc,KAAK,KAAM,EAAG,KAE1B,CACED,GAAI,KACJN,MAAO,SACPC,OAAQ,OACRR,KAAM,IAAIc,KAAK,KAAM,EAAG,KAE1B,CACED,GAAI,KACJN,MAAO,gBACPC,OAAQ,OACRR,KAAM,IAAIc,KAAK,KAAM,EAAG,MAI5B,OACE,kBAAC,EAAD,CAAUJ,MAAOE,KCdDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.665fcfc7.chunk.js","sourcesContent":["import React from \"react\";\nimport './ExpenseDate.css';\n\nfunction ExpenseDate(props){\n  const month = props.date.toLocaleString('en-US', {month: 'long'});\n  const day = props.date.toLocaleString('en-US', {day: '2-digit'});\n  const year = props.date.getFullYear();\n\n  return(\n    <div className=\"expanse-date\">\n        <div className=\"expense-date__month\">{month}</div>\n        <div className=\"expense-date__day\">{day}</div>\n        <div className=\"expense-date__year\">{year}</div>\n      </div>\n  );\n}\n\nexport default ExpenseDate;","import React from \"react\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport './ExpenseItem.css';\n\nfunction ExpenseItem(props) {\n  \n  return ( \n    <div className=\"expense-item\">\n      <ExpenseDate date={props.date} />\n      <div className=\"expense-item__description\">\n        <h2>{props.title}</h2>\n        <div className=\"expense-item__price\">${props.amount}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExpenseItem;","import React from 'react';\nimport ExpenseItem from './ExpenseItem';\nimport './Expenses.css';\n\nfunction Expenses(props){\n  return(\n    <div className=\"expenses\">\n      <ExpenseItem title={props.items[0].title} amount={props.items[0].amount} date={props.items[0].date} />\n      <ExpenseItem title={props.items[1].title} amount={props.items[1].amount} date={props.items[1].date} />\n      <ExpenseItem title={props.items[2].title} amount={props.items[2].amount} date={props.items[2].date} />\n    </div>\n  );\n}\n\nexport default Expenses;","import React from \"react\";\nimport Expenses from './components/Expenses';\n\nfunction App(){\n  const expenses = [\n    {\n      id: 'e1',\n      title: 'Toilet Paper',\n      amount: 94.12,\n      date: new Date(2021, 7, 14)\n    },\n    {\n      id: 'e2',\n      title: 'New TV',\n      amount: 799.12,\n      date: new Date(2021, 2, 12)\n    },\n    {\n      id: 'e3',\n      title: 'Car Insurence',\n      amount: 245.99,\n      date: new Date(2021, 5, 12)\n    },\n    \n  ]\n  return(\n    <Expenses items={expenses} />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}